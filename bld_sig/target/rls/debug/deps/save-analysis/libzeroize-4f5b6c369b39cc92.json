{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1","program":"/Users/hdcui/.rustup/toolchains/nightly-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","zeroize","--edition=2018","/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","-C","metadata=4f5b6c369b39cc92","-C","extra-filename=-4f5b6c369b39cc92","--out-dir","/Users/hdcui/NIZKs-for-AsiaCCS19-and-HSM-CL/bld_sig/target/rls/debug/deps","-L","dependency=/Users/hdcui/NIZKs-for-AsiaCCS19-and-HSM-CL/bld_sig/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/hdcui/.rustup/toolchains/nightly-x86_64-apple-darwin"],"output":"/Users/hdcui/NIZKs-for-AsiaCCS19-and-HSM-CL/bld_sig/target/rls/debug/deps/libzeroize-4f5b6c369b39cc92.rmeta"},"prelude":{"crate_id":{"name":"zeroize","disambiguator":[3517995491291640578,582281513234710745]},"crate_root":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src","external_crates":[{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[16391569226461738429,2396501197197794813]}},{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[6581379148618454087,14557654066704198562]}},{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[15002797972794468225,1552711559034990603]}},{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[7266537971243543179,9932497131885326183]}}],"span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":0,"byte_end":15127,"line_start":1,"line_end":473,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":0,"byte_end":15127,"line_start":1,"line_end":473,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":81},{"krate":0,"index":85},{"krate":0,"index":89},{"krate":0,"index":93},{"krate":0,"index":97},{"krate":0,"index":101},{"krate":0,"index":105},{"krate":0,"index":109},{"krate":0,"index":113},{"krate":0,"index":117},{"krate":0,"index":121},{"krate":0,"index":125},{"krate":0,"index":129},{"krate":0,"index":133},{"krate":0,"index":137},{"krate":0,"index":141},{"krate":0,"index":145},{"krate":0,"index":149},{"krate":0,"index":153},{"krate":0,"index":157},{"krate":0,"index":161},{"krate":0,"index":165},{"krate":0,"index":169},{"krate":0,"index":173},{"krate":0,"index":177},{"krate":0,"index":181},{"krate":0,"index":185},{"krate":0,"index":189},{"krate":0,"index":193},{"krate":0,"index":197},{"krate":0,"index":201},{"krate":0,"index":205},{"krate":0,"index":209},{"krate":0,"index":213},{"krate":0,"index":217},{"krate":0,"index":221},{"krate":0,"index":225},{"krate":0,"index":229},{"krate":0,"index":233},{"krate":0,"index":237},{"krate":0,"index":241},{"krate":0,"index":245},{"krate":0,"index":249},{"krate":0,"index":253},{"krate":0,"index":257},{"krate":0,"index":261},{"krate":0,"index":265},{"krate":0,"index":269},{"krate":0,"index":273},{"krate":0,"index":277},{"krate":0,"index":281},{"krate":0,"index":285},{"krate":0,"index":289},{"krate":0,"index":293},{"krate":0,"index":297},{"krate":0,"index":301},{"krate":0,"index":305},{"krate":0,"index":309},{"krate":0,"index":313},{"krate":0,"index":317},{"krate":0,"index":321},{"krate":0,"index":325},{"krate":0,"index":329},{"krate":0,"index":21},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":47},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":59}],"decl_id":null,"docs":" Securely zero memory with a simple trait ([Zeroize]) built on stable Rust\n primitives which guarantee the operation will not be \"optimized away\".","sig":null,"attributes":[{"value":"/ Securely zero memory with a simple trait ([Zeroize]) built on stable Rust","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":0,"byte_end":77,"line_start":1,"line_end":1,"column_start":1,"column_end":78}},{"value":"/ primitives which guarantee the operation will not be \"optimized away\".","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":78,"byte_end":152,"line_start":2,"line_end":2,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":153,"byte_end":156,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ ## About","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":157,"byte_end":169,"line_start":4,"line_end":4,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":170,"byte_end":173,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [Zeroing memory securely is hard] - compilers optimize for performance, and","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":174,"byte_end":253,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ in doing so they love to \"optimize away\" unnecessary zeroing calls. There are","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":254,"byte_end":335,"line_start":7,"line_end":7,"column_start":1,"column_end":82}},{"value":"/ many documented \"tricks\" to attempt to avoid these optimizations and ensure","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":336,"byte_end":415,"line_start":8,"line_end":8,"column_start":1,"column_end":80}},{"value":"/ that a zeroing routine is performed reliably.","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":416,"byte_end":465,"line_start":9,"line_end":9,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":466,"byte_end":469,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This crate isn't about tricks: it uses [core::ptr::write_volatile]","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":470,"byte_end":540,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/ and [core::sync::atomic] memory fences to provide easy-to-use, portable","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":541,"byte_end":616,"line_start":12,"line_end":12,"column_start":1,"column_end":76}},{"value":"/ zeroing behavior which works on all of Rust's core number types and slices","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":617,"byte_end":695,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/ thereof, implemented in pure Rust with no usage of FFI or assembly.","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":696,"byte_end":767,"line_start":14,"line_end":14,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":768,"byte_end":771,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ - No insecure fallbacks!","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":772,"byte_end":800,"line_start":16,"line_end":16,"column_start":1,"column_end":29}},{"value":"/ - No dependencies!","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":801,"byte_end":823,"line_start":17,"line_end":17,"column_start":1,"column_end":23}},{"value":"/ - No FFI or inline assembly! **WASM friendly** (and tested)!","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":824,"byte_end":888,"line_start":18,"line_end":18,"column_start":1,"column_end":65}},{"value":"/ - `#![no_std]` i.e. **embedded-friendly**!","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":889,"byte_end":935,"line_start":19,"line_end":19,"column_start":1,"column_end":47}},{"value":"/ - No functionality besides securely zeroing memory!","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":936,"byte_end":991,"line_start":20,"line_end":20,"column_start":1,"column_end":56}},{"value":"/ - (Optional) Custom derive support for zeroing complex structures","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":992,"byte_end":1061,"line_start":21,"line_end":21,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":1062,"byte_end":1065,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ## Usage","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":1066,"byte_end":1078,"line_start":23,"line_end":23,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":1079,"byte_end":1082,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":1083,"byte_end":1090,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/ use zeroize::Zeroize;","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":1091,"byte_end":1116,"line_start":26,"line_end":26,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":1117,"byte_end":1120,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":1121,"byte_end":1136,"line_start":28,"line_end":28,"column_start":1,"column_end":16}},{"value":"/     // Protip: don't embed secrets in your source code.","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":1137,"byte_end":1196,"line_start":29,"line_end":29,"column_start":1,"column_end":60}},{"value":"/     // This is just an example.","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":1197,"byte_end":1232,"line_start":30,"line_end":30,"column_start":1,"column_end":36}},{"value":"/     let mut secret = b\"Air shield password: 1,2,3,4,5\".to_vec();","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":1233,"byte_end":1301,"line_start":31,"line_end":31,"column_start":1,"column_end":69}},{"value":"/     // [ ... ] open the air shield here","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":1302,"byte_end":1345,"line_start":32,"line_end":32,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":1346,"byte_end":1349,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/     // Now that we're done using the secret, zero it out.","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":1350,"byte_end":1411,"line_start":34,"line_end":34,"column_start":1,"column_end":62}},{"value":"/     secret.zeroize();","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":1412,"byte_end":1437,"line_start":35,"line_end":35,"column_start":1,"column_end":26}},{"value":"/ }","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":1438,"byte_end":1443,"line_start":36,"line_end":36,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":1444,"byte_end":1451,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":1452,"byte_end":1455,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ The [Zeroize] trait is impl'd on all of Rust's core scalar types including","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":1456,"byte_end":1534,"line_start":39,"line_end":39,"column_start":1,"column_end":79}},{"value":"/ integers, floats, `bool`, and `char`.","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":1535,"byte_end":1576,"line_start":40,"line_end":40,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":1577,"byte_end":1580,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ Additionally, it's implemented on slices and `IterMut`s of the above types.","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":1581,"byte_end":1660,"line_start":42,"line_end":42,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":1661,"byte_end":1664,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ When the `alloc` feature is enabled (which it is by default), it's also","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":1665,"byte_end":1740,"line_start":44,"line_end":44,"column_start":1,"column_end":76}},{"value":"/ impl'd for `Vec<T>` for the above types as well as `String`, where it provides","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":1741,"byte_end":1823,"line_start":45,"line_end":45,"column_start":1,"column_end":83}},{"value":"/ [Vec::clear()] / [String::clear()]-like behavior (truncating to zero-length)","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":1824,"byte_end":1904,"line_start":46,"line_end":46,"column_start":1,"column_end":81}},{"value":"/ but ensures the backing memory is securely zeroed with some caveats.","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":1905,"byte_end":1977,"line_start":47,"line_end":47,"column_start":1,"column_end":73}},{"value":"/ (NOTE: see \"Stack/Heap Zeroing Notes\" for important `Vec`/`String` details)","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":1978,"byte_end":2057,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2058,"byte_end":2061,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ The [DefaultIsZeroes] marker trait can be impl'd on types which also","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2062,"byte_end":2134,"line_start":50,"line_end":50,"column_start":1,"column_end":73}},{"value":"/ impl [Default], which implements [Zeroize] by overwriting a value with","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2135,"byte_end":2209,"line_start":51,"line_end":51,"column_start":1,"column_end":75}},{"value":"/ the default value.","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2210,"byte_end":2232,"line_start":52,"line_end":52,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2233,"byte_end":2236,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ## Custom Derive Support","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2237,"byte_end":2265,"line_start":54,"line_end":54,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2266,"byte_end":2269,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ This crate has custom derive support for the `Zeroize` trait,","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2270,"byte_end":2335,"line_start":56,"line_end":56,"column_start":1,"column_end":66}},{"value":"/ gated under the `zeroize` crate's `zeroize_derive` Cargo feature,","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2336,"byte_end":2405,"line_start":57,"line_end":57,"column_start":1,"column_end":70}},{"value":"/ which automatically calls `zeroize()` on all members of a struct","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2406,"byte_end":2474,"line_start":58,"line_end":58,"column_start":1,"column_end":69}},{"value":"/ or tuple struct.","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2475,"byte_end":2495,"line_start":59,"line_end":59,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2496,"byte_end":2499,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ Additionally it supports the following attribute:","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2500,"byte_end":2553,"line_start":61,"line_end":61,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2554,"byte_end":2557,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ - `#[zeroize(drop)]`: call `zeroize()` when this item is dropped","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2558,"byte_end":2626,"line_start":63,"line_end":63,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2627,"byte_end":2630,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ Example which derives `Drop`:","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2631,"byte_end":2664,"line_start":65,"line_end":65,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2665,"byte_end":2668,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2669,"byte_end":2676,"line_start":67,"line_end":67,"column_start":1,"column_end":8}},{"value":"/ use zeroize::Zeroize;","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2677,"byte_end":2702,"line_start":68,"line_end":68,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2703,"byte_end":2706,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ // This struct will be zeroized on drop","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2707,"byte_end":2750,"line_start":70,"line_end":70,"column_start":1,"column_end":44}},{"value":"/ #[derive(Zeroize)]","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2751,"byte_end":2773,"line_start":71,"line_end":71,"column_start":1,"column_end":23}},{"value":"/ #[zeroize(drop)]","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2774,"byte_end":2794,"line_start":72,"line_end":72,"column_start":1,"column_end":21}},{"value":"/ struct MyStruct([u8; 32]);","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2795,"byte_end":2825,"line_start":73,"line_end":73,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2826,"byte_end":2833,"line_start":74,"line_end":74,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2834,"byte_end":2837,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ Example which does not derive `Drop` (useful for e.g. `Copy` types)","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2838,"byte_end":2909,"line_start":76,"line_end":76,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2910,"byte_end":2913,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2914,"byte_end":2921,"line_start":78,"line_end":78,"column_start":1,"column_end":8}},{"value":"/ use zeroize::Zeroize;","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2922,"byte_end":2947,"line_start":79,"line_end":79,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2948,"byte_end":2951,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ // This struct will *NOT* be zeroized on drop","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":2952,"byte_end":3001,"line_start":81,"line_end":81,"column_start":1,"column_end":50}},{"value":"/ #[derive(Copy, Clone, Zeroize)]","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":3002,"byte_end":3037,"line_start":82,"line_end":82,"column_start":1,"column_end":36}},{"value":"/ struct MyStruct([u8; 32]);","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":3038,"byte_end":3068,"line_start":83,"line_end":83,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":3069,"byte_end":3076,"line_start":84,"line_end":84,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":3077,"byte_end":3080,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ ## `Zeroizing<Z>`: wrapper for zeroizing arbitrary values on drop","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":3081,"byte_end":3150,"line_start":86,"line_end":86,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":3151,"byte_end":3154,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ `Zeroizing<Z: Zeroize>` is a generic wrapper type that impls `Deref`","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":3155,"byte_end":3227,"line_start":88,"line_end":88,"column_start":1,"column_end":73}},{"value":"/ and `DerefMut`, allowing access to an inner value of type `Z`, and also","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":3228,"byte_end":3303,"line_start":89,"line_end":89,"column_start":1,"column_end":76}},{"value":"/ impls a `Drop` handler which calls `zeroize()` on its contents:","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":3304,"byte_end":3371,"line_start":90,"line_end":90,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":3372,"byte_end":3375,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":3376,"byte_end":3383,"line_start":92,"line_end":92,"column_start":1,"column_end":8}},{"value":"/ use zeroize::Zeroizing;","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":3384,"byte_end":3411,"line_start":93,"line_end":93,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":3412,"byte_end":3415,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":3416,"byte_end":3431,"line_start":95,"line_end":95,"column_start":1,"column_end":16}},{"value":"/     let mut secret = Zeroizing::new([0u8; 5]);","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":3432,"byte_end":3482,"line_start":96,"line_end":96,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":3483,"byte_end":3486,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/     // Set the air shield password","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":3487,"byte_end":3525,"line_start":98,"line_end":98,"column_start":1,"column_end":39}},{"value":"/     // Protip (again): don't embed secrets in your source code.","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":3526,"byte_end":3593,"line_start":99,"line_end":99,"column_start":1,"column_end":68}},{"value":"/     secret.copy_from_slice(&[1, 2, 3, 4, 5]);","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":3594,"byte_end":3643,"line_start":100,"line_end":100,"column_start":1,"column_end":50}},{"value":"/     assert_eq!(secret.as_ref(), &[1, 2, 3, 4, 5]);","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":3644,"byte_end":3698,"line_start":101,"line_end":101,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":3699,"byte_end":3702,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/     // The contents of `secret` will be automatically zeroized on drop","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":3703,"byte_end":3777,"line_start":103,"line_end":103,"column_start":1,"column_end":75}},{"value":"/ }","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":3778,"byte_end":3783,"line_start":104,"line_end":104,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":3784,"byte_end":3791,"line_start":105,"line_end":105,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":3792,"byte_end":3795,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ ## What guarantees does this crate provide?","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":3796,"byte_end":3843,"line_start":107,"line_end":107,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":3844,"byte_end":3847,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ This crate guarantees the following:","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":3848,"byte_end":3888,"line_start":109,"line_end":109,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":3889,"byte_end":3892,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ 1. The zeroing operation can't be \"optimized away\" by the compiler.","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":3893,"byte_end":3964,"line_start":111,"line_end":111,"column_start":1,"column_end":72}},{"value":"/ 2. All subsequent reads to memory will see \"zeroized\" values.","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":3965,"byte_end":4030,"line_start":112,"line_end":112,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":4031,"byte_end":4034,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ LLVM's volatile semantics ensure #1 is true.","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":4035,"byte_end":4083,"line_start":114,"line_end":114,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":4084,"byte_end":4087,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ Additionally, thanks to work by the [Unsafe Code Guidelines Working Group],","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":4088,"byte_end":4167,"line_start":116,"line_end":116,"column_start":1,"column_end":80}},{"value":"/ we can now fairly confidently say #2 is true as well. Previously there were","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":4168,"byte_end":4247,"line_start":117,"line_end":117,"column_start":1,"column_end":80}},{"value":"/ worries that the approach used by this crate (mixing volatile and","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":4248,"byte_end":4317,"line_start":118,"line_end":118,"column_start":1,"column_end":70}},{"value":"/ non-volatile accesses) was undefined behavior due to language contained","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":4318,"byte_end":4393,"line_start":119,"line_end":119,"column_start":1,"column_end":76}},{"value":"/ in the documentation for `write_volatile`, however after some discussion","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":4394,"byte_end":4470,"line_start":120,"line_end":120,"column_start":1,"column_end":77}},{"value":"/ [these remarks have been removed] and the specific usage pattern in this","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":4471,"byte_end":4547,"line_start":121,"line_end":121,"column_start":1,"column_end":77}},{"value":"/ crate is considered to be well-defined.","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":4548,"byte_end":4591,"line_start":122,"line_end":122,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":4592,"byte_end":4595,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ Additionally this crate leverages [compiler_fence] from","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":4596,"byte_end":4655,"line_start":124,"line_end":124,"column_start":1,"column_end":60}},{"value":"/ [core::sync::atomic] with the strictest ordering ([Ordering::SeqCst])","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":4656,"byte_end":4729,"line_start":125,"line_end":125,"column_start":1,"column_end":74}},{"value":"/ as a precaution to help ensure reads are not reordered before memory has","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":4730,"byte_end":4806,"line_start":126,"line_end":126,"column_start":1,"column_end":77}},{"value":"/ been zeroed.","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":4807,"byte_end":4823,"line_start":127,"line_end":127,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":4824,"byte_end":4827,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ All of that said, there is still potential for microarchitectural attacks","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":4828,"byte_end":4905,"line_start":129,"line_end":129,"column_start":1,"column_end":78}},{"value":"/ (ala Spectre/Meltdown) to leak \"zeroized\" secrets through covert channels.","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":4906,"byte_end":4984,"line_start":130,"line_end":130,"column_start":1,"column_end":79}},{"value":"/ This crate makes no guarantees that zeroized values cannot be leaked","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":4985,"byte_end":5057,"line_start":131,"line_end":131,"column_start":1,"column_end":73}},{"value":"/ through such channels, as they represent flaws in the underlying hardware.","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":5058,"byte_end":5136,"line_start":132,"line_end":132,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":5137,"byte_end":5140,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ ## Stack/Heap Zeroing Notes","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":5141,"byte_end":5172,"line_start":134,"line_end":134,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":5173,"byte_end":5176,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ This crate can be used to zero values from either the stack or the heap.","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":5177,"byte_end":5253,"line_start":136,"line_end":136,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":5254,"byte_end":5257,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ However, be aware several operations in Rust can unintentionally leave","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":5258,"byte_end":5332,"line_start":138,"line_end":138,"column_start":1,"column_end":75}},{"value":"/ copies of data in memory. This includes but is not limited to:","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":5333,"byte_end":5399,"line_start":139,"line_end":139,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":5400,"byte_end":5403,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ - Moves and `Copy`","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":5404,"byte_end":5426,"line_start":141,"line_end":141,"column_start":1,"column_end":23}},{"value":"/ - Heap reallocation when using `Vec` and `String`","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":5427,"byte_end":5480,"line_start":142,"line_end":142,"column_start":1,"column_end":54}},{"value":"/ - Borrowers of a reference making copies of the data","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":5481,"byte_end":5537,"line_start":143,"line_end":143,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":5538,"byte_end":5541,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ [`Pin`][pin] can be leveraged in conjunction with this crate to ensure","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":5542,"byte_end":5616,"line_start":145,"line_end":145,"column_start":1,"column_end":75}},{"value":"/ data kept on the stack isn't moved.","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":5617,"byte_end":5656,"line_start":146,"line_end":146,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":5657,"byte_end":5660,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ The `Zeroize` impls for `Vec` and `String` zeroize the entire capacity of","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":5661,"byte_end":5738,"line_start":148,"line_end":148,"column_start":1,"column_end":78}},{"value":"/ their backing buffer, but cannot guarantee copies of the data were not","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":5739,"byte_end":5813,"line_start":149,"line_end":149,"column_start":1,"column_end":75}},{"value":"/ previously made by buffer reallocation. It's therefore important when","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":5814,"byte_end":5887,"line_start":150,"line_end":150,"column_start":1,"column_end":74}},{"value":"/ attempting to zeroize such buffers to initialize them to the correct","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":5888,"byte_end":5960,"line_start":151,"line_end":151,"column_start":1,"column_end":73}},{"value":"/ capacity, and take care to prevent subsequent reallocation.","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":5961,"byte_end":6024,"line_start":152,"line_end":152,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":6025,"byte_end":6028,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ The `secrecy` crate provides higher-level abstractions for eliminating","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":6029,"byte_end":6103,"line_start":154,"line_end":154,"column_start":1,"column_end":75}},{"value":"/ usage patterns which can cause reallocations:","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":6104,"byte_end":6153,"line_start":155,"line_end":155,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":6154,"byte_end":6157,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ <https://crates.io/crates/secrecy>","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":6158,"byte_end":6196,"line_start":157,"line_end":157,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":6197,"byte_end":6200,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ ## What about: clearing registers, mlock, mprotect, etc?","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":6201,"byte_end":6261,"line_start":159,"line_end":159,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":6262,"byte_end":6265,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ This crate is focused on providing simple, unobtrusive support for reliably","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":6266,"byte_end":6345,"line_start":161,"line_end":161,"column_start":1,"column_end":80}},{"value":"/ zeroing memory using the best approach possible on stable Rust.","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":6346,"byte_end":6413,"line_start":162,"line_end":162,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":6414,"byte_end":6417,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ Clearing registers is a difficult problem that can't easily be solved by","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":6418,"byte_end":6494,"line_start":164,"line_end":164,"column_start":1,"column_end":77}},{"value":"/ something like a crate, and requires either inline ASM or rustc support.","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":6495,"byte_end":6571,"line_start":165,"line_end":165,"column_start":1,"column_end":77}},{"value":"/ See <https://github.com/rust-lang/rust/issues/17046> for background on","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":6572,"byte_end":6646,"line_start":166,"line_end":166,"column_start":1,"column_end":75}},{"value":"/ this particular problem.","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":6647,"byte_end":6675,"line_start":167,"line_end":167,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":6676,"byte_end":6679,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ Other memory protection mechanisms are interesting and useful, but often","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":6680,"byte_end":6756,"line_start":169,"line_end":169,"column_start":1,"column_end":77}},{"value":"/ overkill (e.g. defending against RAM scraping or attackers with swap access).","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":6757,"byte_end":6838,"line_start":170,"line_end":170,"column_start":1,"column_end":82}},{"value":"/ In as much as there may be merit to these approaches, there are also many","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":6839,"byte_end":6916,"line_start":171,"line_end":171,"column_start":1,"column_end":78}},{"value":"/ other crates that already implement more sophisticated memory protections.","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":6917,"byte_end":6995,"line_start":172,"line_end":172,"column_start":1,"column_end":79}},{"value":"/ Such protections are explicitly out-of-scope for this crate.","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":6996,"byte_end":7060,"line_start":173,"line_end":173,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":7061,"byte_end":7064,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ Zeroing memory is [good cryptographic hygiene] and this crate seeks to promote","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":7065,"byte_end":7147,"line_start":175,"line_end":175,"column_start":1,"column_end":83}},{"value":"/ it in the most unobtrusive manner possible. This includes omitting complex","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":7148,"byte_end":7226,"line_start":176,"line_end":176,"column_start":1,"column_end":79}},{"value":"/ `unsafe` memory protection systems and just trying to make the best memory","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":7227,"byte_end":7305,"line_start":177,"line_end":177,"column_start":1,"column_end":79}},{"value":"/ zeroing crate available.","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":7306,"byte_end":7334,"line_start":178,"line_end":178,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":7335,"byte_end":7338,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ [Zeroize]: https://docs.rs/zeroize/latest/zeroize/trait.Zeroize.html","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":7339,"byte_end":7411,"line_start":180,"line_end":180,"column_start":1,"column_end":73}},{"value":"/ [Zeroing memory securely is hard]: http://www.daemonology.net/blog/2014-09-04-how-to-zero-a-buffer.html","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":7412,"byte_end":7519,"line_start":181,"line_end":181,"column_start":1,"column_end":108}},{"value":"/ [Vec::clear()]: https://doc.rust-lang.org/std/vec/struct.Vec.html#method.clear","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":7520,"byte_end":7602,"line_start":182,"line_end":182,"column_start":1,"column_end":83}},{"value":"/ [String::clear()]: https://doc.rust-lang.org/std/string/struct.String.html#method.clear","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":7603,"byte_end":7694,"line_start":183,"line_end":183,"column_start":1,"column_end":92}},{"value":"/ [DefaultIsZeroes]: https://docs.rs/zeroize/latest/zeroize/trait.DefaultIsZeroes.html","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":7695,"byte_end":7783,"line_start":184,"line_end":184,"column_start":1,"column_end":89}},{"value":"/ [Default]: https://doc.rust-lang.org/std/default/trait.Default.html","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":7784,"byte_end":7855,"line_start":185,"line_end":185,"column_start":1,"column_end":72}},{"value":"/ [core::ptr::write_volatile]: https://doc.rust-lang.org/core/ptr/fn.write_volatile.html","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":7856,"byte_end":7946,"line_start":186,"line_end":186,"column_start":1,"column_end":91}},{"value":"/ [Unsafe Code Guidelines Working Group]: https://github.com/rust-lang/unsafe-code-guidelines","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":7947,"byte_end":8042,"line_start":187,"line_end":187,"column_start":1,"column_end":96}},{"value":"/ [these remarks have been removed]: https://github.com/rust-lang/rust/pull/60972","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":8043,"byte_end":8126,"line_start":188,"line_end":188,"column_start":1,"column_end":84}},{"value":"/ [core::sync::atomic]: https://doc.rust-lang.org/stable/core/sync/atomic/index.html","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":8127,"byte_end":8213,"line_start":189,"line_end":189,"column_start":1,"column_end":87}},{"value":"/ [Ordering::SeqCst]: https://doc.rust-lang.org/std/sync/atomic/enum.Ordering.html#variant.SeqCst","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":8214,"byte_end":8313,"line_start":190,"line_end":190,"column_start":1,"column_end":100}},{"value":"/ [compiler_fence]: https://doc.rust-lang.org/stable/core/sync/atomic/fn.compiler_fence.html","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":8314,"byte_end":8408,"line_start":191,"line_end":191,"column_start":1,"column_end":95}},{"value":"/ [pin]: https://doc.rust-lang.org/std/pin/struct.Pin.html","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":8409,"byte_end":8469,"line_start":192,"line_end":192,"column_start":1,"column_end":61}},{"value":"/ [good cryptographic hygiene]: https://github.com/veorq/cryptocoding#clean-memory-of-secret-data","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":8470,"byte_end":8569,"line_start":193,"line_end":193,"column_start":1,"column_end":100}},{"value":"no_std","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":8571,"byte_end":8581,"line_start":195,"line_end":195,"column_start":1,"column_end":11}},{"value":"warn(missing_docs, rust_2018_idioms, trivial_casts, unused_qualifications)","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":8640,"byte_end":8718,"line_start":197,"line_end":197,"column_start":1,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":13},"span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":9159,"byte_end":9166,"line_start":219,"line_end":219,"column_start":11,"column_end":18},"name":"Zeroize","qualname":"::Zeroize","value":"Zeroize","parent":null,"children":[{"krate":0,"index":14}],"decl_id":null,"docs":" Trait for securely erasing types from memory\n","sig":null,"attributes":[{"value":"/ Trait for securely erasing types from memory","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":9100,"byte_end":9148,"line_start":218,"line_end":218,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":9318,"byte_end":9325,"line_start":222,"line_end":222,"column_start":8,"column_end":15},"name":"zeroize","qualname":"::Zeroize::zeroize","value":"pub fn zeroize(&mut Self)","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":" Zero out this object from memory (using Rust or OS intrinsics which\n ensure the zeroization operation is not \"optimized away\")\n","sig":null,"attributes":[{"value":"/ Zero out this object from memory (using Rust or OS intrinsics which","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":9173,"byte_end":9244,"line_start":220,"line_end":220,"column_start":5,"column_end":76}},{"value":"/ ensure the zeroization operation is not \"optimized away\")","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":9249,"byte_end":9310,"line_start":221,"line_end":221,"column_start":5,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":15},"span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":9428,"byte_end":9443,"line_start":226,"line_end":226,"column_start":11,"column_end":26},"name":"DefaultIsZeroes","qualname":"::DefaultIsZeroes","value":"DefaultIsZeroes: Copy + Default + Sized","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for types whose `Default` is the desired zeroization result\n","sig":null,"attributes":[{"value":"/ Marker trait for types whose `Default` is the desired zeroization result","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":9341,"byte_end":9417,"line_start":225,"line_end":225,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":36},"span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":12144,"byte_end":12153,"line_start":335,"line_end":335,"column_start":12,"column_end":21},"name":"Zeroizing","qualname":"::Zeroizing","value":"","parent":null,"children":[],"decl_id":null,"docs":" `Zeroizing` is a a wrapper for any `Z: Zeroize` type which implements a\n `Drop` handler which zeroizes dropped values.\n","sig":null,"attributes":[{"value":"/ `Zeroizing` is a a wrapper for any `Z: Zeroize` type which implements a","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":12007,"byte_end":12082,"line_start":333,"line_end":333,"column_start":1,"column_end":76}},{"value":"/ `Drop` handler which zeroizes dropped values.","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":12083,"byte_end":12132,"line_start":334,"line_end":334,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":12296,"byte_end":12299,"line_start":342,"line_end":342,"column_start":12,"column_end":15},"name":"new","qualname":"<Zeroizing<Z>>::new","value":"pub fn new(Z) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wrap a value in `Zeroizing`, ensuring it's zeroized on drop.\n","sig":null,"attributes":[{"value":"/ Wrap a value in `Zeroizing`, ensuring it's zeroized on drop.","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":12220,"byte_end":12284,"line_start":341,"line_end":341,"column_start":5,"column_end":69}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":9492,"byte_end":9493,"line_start":228,"line_end":228,"column_start":21,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":18}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":10651,"byte_end":10658,"line_start":271,"line_end":271,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":24}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":10812,"byte_end":10818,"line_start":282,"line_end":282,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":27}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":11587,"byte_end":11590,"line_start":313,"line_end":313,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":33}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":11825,"byte_end":11831,"line_start":325,"line_end":325,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":12179,"byte_end":12188,"line_start":337,"line_end":337,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":12377,"byte_end":12386,"line_start":347,"line_end":347,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":12515,"byte_end":12524,"line_start":358,"line_end":358,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":49}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":12641,"byte_end":12650,"line_start":367,"line_end":367,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":12926,"byte_end":12935,"line_start":379,"line_end":379,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":9445,"byte_end":9449,"line_start":226,"line_end":226,"column_start":28,"column_end":32},"kind":"SuperTrait","from":{"krate":1,"index":2048},"to":{"krate":0,"index":15}},{"span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":9452,"byte_end":9459,"line_start":226,"line_end":226,"column_start":35,"column_end":42},"kind":"SuperTrait","from":{"krate":1,"index":2026},"to":{"krate":0,"index":15}},{"span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":9462,"byte_end":9467,"line_start":226,"line_end":226,"column_start":45,"column_end":50},"kind":"SuperTrait","from":{"krate":1,"index":2043},"to":{"krate":0,"index":15}},{"span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":9492,"byte_end":9493,"line_start":228,"line_end":228,"column_start":21,"column_end":22},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":17},"to":{"krate":0,"index":13}},{"span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":10651,"byte_end":10658,"line_start":271,"line_end":271,"column_start":25,"column_end":32},"kind":{"Impl":{"id":17}},"from":{"krate":1,"index":7160},"to":{"krate":0,"index":13}},{"span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":10812,"byte_end":10818,"line_start":282,"line_end":282,"column_start":21,"column_end":27},"kind":{"Impl":{"id":18}},"from":{"krate":1,"index":31867},"to":{"krate":0,"index":13}},{"span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":11587,"byte_end":11590,"line_start":313,"line_end":313,"column_start":21,"column_end":24},"kind":{"Impl":{"id":19}},"from":{"krate":4,"index":4568},"to":{"krate":0,"index":13}},{"span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":11825,"byte_end":11831,"line_start":325,"line_end":325,"column_start":18,"column_end":24},"kind":{"Impl":{"id":20}},"from":{"krate":4,"index":5328},"to":{"krate":0,"index":13}},{"span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":12179,"byte_end":12188,"line_start":337,"line_end":337,"column_start":9,"column_end":18},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":36},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":12377,"byte_end":12386,"line_start":347,"line_end":347,"column_start":24,"column_end":33},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":36},"to":{"krate":1,"index":2233}},{"span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":12515,"byte_end":12524,"line_start":358,"line_end":358,"column_start":27,"column_end":36},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":36},"to":{"krate":1,"index":2246}},{"span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":12641,"byte_end":12650,"line_start":367,"line_end":367,"column_start":21,"column_end":30},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":36},"to":{"krate":0,"index":13}},{"span":{"file_name":"/Users/hdcui/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-0.10.1/src/lib.rs","byte_start":12926,"byte_end":12935,"line_start":379,"line_end":379,"column_start":18,"column_end":27},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":36},"to":{"krate":1,"index":2257}}]}